// Generated by CoffeeScript 1.7.1
var Color, Context, Cube, Geometry, Mesh, OrthographicCamera, PerspectiveCamera, SolidColor, TextLabel, Texture2D, Textured, Vec2, Vec3, _ref, _ref1, _ref2;

_ref = require('pex-geom'), Geometry = _ref.Geometry, Vec2 = _ref.Vec2, Vec3 = _ref.Vec3;

_ref1 = require('pex-glu'), Mesh = _ref1.Mesh, Texture2D = _ref1.Texture2D, Context = _ref1.Context, OrthographicCamera = _ref1.OrthographicCamera, PerspectiveCamera = _ref1.PerspectiveCamera;

_ref2 = require('pex-materials'), SolidColor = _ref2.SolidColor, Textured = _ref2.Textured;

Cube = require('pex-gen').Cube;

Color = require('pex-color').Color;

TextLabel = (function() {
  function TextLabel(app, position, text, fontSize, letterWidth) {
    var coord, coords, i, _i, _j, _len, _ref3;
    this.app = app;
    this.position = position;
    this.fontSize = fontSize != null ? fontSize : 50;
    this.letterWidth = letterWidth != null ? letterWidth : 0.8;
    this.gl = Context.currentContext;
    this.maxLen = 10;
    this.camera = new OrthographicCamera(0, 0, this.app.width, this.app.height, 1, -1, new Vec3(0, 0, 1), new Vec3(0, 0, 0));
    this.geom = new Geometry({
      vertices: true,
      texCoords: true,
      faces: true
    });
    for (i = _i = 0, _ref3 = this.maxLen; 0 <= _ref3 ? _i < _ref3 : _i > _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
      this.geom.vertices.push(new Vec3(i * this.letterWidth, 0, 0));
      this.geom.vertices.push(new Vec3((i + 1) * this.letterWidth, 0, 0));
      this.geom.vertices.push(new Vec3((i + 1) * this.letterWidth, 1, 0));
      this.geom.vertices.push(new Vec3(i * this.letterWidth, 1, 0));
      coords = this.charToTexCoords(text[i] || ' ');
      for (_j = 0, _len = coords.length; _j < _len; _j++) {
        coord = coords[_j];
        this.geom.texCoords.push(coord);
      }
      this.geom.faces.push([i * 4, i * 4 + 1, i * 4 + 2, i * 4 + 3]);
    }
    this.geom.computeEdges();
    this.fontTexture = Texture2D.load('assets/ui/font.png');
    this.mesh = new Mesh(this.geom, new Textured({
      texture: this.fontTexture
    }));
    this.mesh.scale.set(this.fontSize, this.fontSize, this.fontSize);
    this.mesh.position = this.position.dup();
    this.meshBg = new Mesh(this.geom, new SolidColor({
      color: Color.Red
    }));
    this.meshBg.scale.set(this.fontSize, this.fontSize, this.fontSize);
    this.meshBg.position = this.position.dup();
    this.text = "";
    this.alpha = 1;
  }

  TextLabel.prototype.charToTexCoords = function(c) {
    var charIndex, col, dt, letters, lettersPerRow, row;
    letters = " ABCDEFGHIJKLMNOPQRSTUWVXYZ0123456789-:";
    lettersPerRow = 8;
    charIndex = letters.indexOf(c);
    row = charIndex % lettersPerRow;
    col = Math.floor(charIndex / lettersPerRow);
    dt = 1 / lettersPerRow;
    return [new Vec2(-0.1 * dt + row * dt + (1.0 - this.letterWidth) / 2 / 8, 1 - col * dt), new Vec2(-0.1 * dt + (row + 1) * dt - (1.0 - this.letterWidth) / 2 / 8, 1 - col * dt), new Vec2(-0.1 * dt + (row + 1) * dt - (1.0 - this.letterWidth) / 2 / 8, 1 - (col + 1) * dt), new Vec2(-0.1 * dt + row * dt + (1.0 - this.letterWidth) / 2 / 8, 1 - (col + 1) * dt)];
  };

  TextLabel.prototype.setText = function(text) {
    var coord, coordIndex, coords, i, _i, _j, _len, _ref3, _results;
    if (text == null) {
      text = "";
    }
    if (text === "undefined") {
      text = "";
    }
    text = text.toUpperCase();
    this.text = text;
    this.mesh.position = this.position.dup();
    this.mesh.position.x -= text.length / 2 * this.fontSize * this.letterWidth;
    _results = [];
    for (i = _i = 0, _ref3 = this.maxLen; 0 <= _ref3 ? _i < _ref3 : _i > _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
      coords = this.charToTexCoords(text[i] || ' ');
      for (coordIndex = _j = 0, _len = coords.length; _j < _len; coordIndex = ++_j) {
        coord = coords[coordIndex];
        this.geom.texCoords[i * 4 + coordIndex] = coord;
      }
      _results.push(this.geom.texCoords.dirty = true);
    }
    return _results;
  };

  TextLabel.prototype.setTime = function(minutes, seconds) {
    var m, s;
    m = '' + Math.floor(minutes);
    if (m.length === 1) {
      m = '0' + m;
    }
    s = '' + Math.floor(seconds);
    if (s.length === 1) {
      s = '0' + s;
    }
    return this.setText(m + ':' + s);
  };

  TextLabel.prototype.draw = function(c) {
    this.gl.disable(this.gl.DEPTH_TEST);
    this.gl.disable(this.gl.BLEND);
    this.meshBg.draw(this.camera);
    this.gl.enable(this.gl.BLEND);
    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE);
    this.gl.disable(this.gl.DEPTH_TEST);
    return this.mesh.draw(this.camera);
  };

  TextLabel.prototype.dispose = function() {
    this.fontTexture.dispose();
    this.meshBg.material.program.dispose();
    this.meshBg.dispose();
    this.mesh.material.program.dispose();
    return this.mesh.dispose();
  };

  return TextLabel;

})();

module.exports = TextLabel;
